"use strict";
// QNCE Branching System - Main Export
// Sprint #3 - Advanced Narrative & AI Integration
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.example = exports.createBranchingEngine = exports.QNCEBranchingEngine = void 0;
// Core branching engine
var engine_simple_1 = require("./engine-simple");
Object.defineProperty(exports, "QNCEBranchingEngine", { enumerable: true, get: function () { return engine_simple_1.QNCEBranchingEngine; } });
Object.defineProperty(exports, "createBranchingEngine", { enumerable: true, get: function () { return engine_simple_1.createBranchingEngine; } });
// Complete type system
__exportStar(require("./models"), exports);
// Usage example for documentation
exports.example = {
    // Example story structure showing branching capabilities
    storyStructure: {
        story: 'QNCEStory with chapters and branching config',
        chapters: 'Logical groupings of flows and branch points',
        flows: 'Sequences of narrative nodes with entry/exit points',
        branches: 'Dynamic decision points with conditions and options'
    },
    // Example API usage
    usage: `
    import { createBranchingEngine, QNCEStory } from 'qnce-engine/branching';
    
    // Create branching engine
    const engine = createBranchingEngine(story, initialState);
    
    // Evaluate available branches
    const options = await engine.evaluateAvailableBranches();
    
    // Execute player choice
    await engine.executeBranch(selectedOptionId);
    
    // Dynamic content insertion
    await engine.insertDynamicBranch(branchOperation);
    
    // AI-driven content generation
    engine.setAIContext(aiContext);
    const aiBranches = await engine.generateAIBranches();
  `
};
//# sourceMappingURL=index.js.map